#!/usr/bin/env python3
"""
Test script to verify that analysis_report.json includes GitHub repository names 
in "username/repo-name" format.
"""

import asyncio
import sys
import os
import tempfile
import json
import logging
from pathlib import Path
from datetime import datetime

# Add src to path
current_dir = Path(__file__).parent.parent
sys.path.insert(0, str(current_dir))
os.chdir(current_dir)

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def test_github_repo_format_in_report():
    """Test that analysis_report.json includes GitHub repo names in username/repo-name format."""
    print("üß™ Testing GitHub Repository Format in Analysis Report")
    print("=" * 70)
    
    try:
        from src.assembly.project_generator import ProjectGenerator
        from src.reporting.ai_integrated_reporter import AIIntegratedReporter
        
        # Create test project with known GitHub repositories
        test_repositories = [
            {
                'name': 'requests',
                'url': 'https://github.com/psf/requests',
                'full_name': 'psf/requests',
                'files_copied': ['requests/api.py', 'requests/models.py'],
                'purpose': 'HTTP library for Python',
                'license': 'Apache-2.0',
                'stars': 50000,
                'forks': 8000
            },
            {
                'name': 'beautifulsoup4',
                'url': 'https://github.com/waylan/beautifulsoup',
                'full_name': 'waylan/beautifulsoup',
                'files_copied': ['bs4/BeautifulSoup.py'],
                'purpose': 'HTML parsing library',
                'license': 'MIT',
                'stars': 12000,
                'forks': 2000
            },
            {
                'name': 'fastapi',
                'url': 'https://github.com/tiangolo/fastapi',
                'full_name': 'tiangolo/fastapi',
                'files_copied': ['fastapi/main.py', 'fastapi/routing.py'],
                'purpose': 'Modern web framework for Python',
                'license': 'MIT',
                'stars': 65000,
                'forks': 5500
            }
        ]
        
        # Create test project files
        test_files = {
            'main.py': '''#!/usr/bin/env python3
"""
Web Scraper with API
Generated by AutoBot Assembly System
"""

import requests
from bs4 import BeautifulSoup
from fastapi import FastAPI
import json
from datetime import datetime

app = FastAPI(title="News Scraper API")

@app.get("/")
async def root():
    return {"message": "News Scraper API", "status": "running"}

@app.get("/scrape")
async def scrape_news():
    """Scrape news headlines."""
    headlines = ["Breaking: AI System Works!", "Tech: Automated Development"]
    return {"headlines": headlines, "count": len(headlines)}

def scrape_with_requests():
    """Use requests library for scraping."""
    # Placeholder implementation
    return ["Sample headline 1", "Sample headline 2"]

def parse_with_bs4(html_content):
    """Use BeautifulSoup for parsing."""
    soup = BeautifulSoup(html_content, 'html.parser')
    return soup.find_all('h2')

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
''',
            'requirements.txt': '''requests>=2.25.0
beautifulsoup4>=4.9.0
fastapi>=0.68.0
uvicorn>=0.15.0
lxml>=4.6.0
''',
            'README.md': '''# News Scraper API

A comprehensive news scraping API built with FastAPI, requests, and BeautifulSoup.

## Features

- RESTful API with FastAPI
- Web scraping with requests and BeautifulSoup
- JSON data export
- Real-time scraping endpoints

## Installation

```bash
pip install -r requirements.txt
```

## Usage

```bash
python main.py
```

Then visit http://localhost:8000/docs for the API documentation.

## Repositories Used

This project integrates code from the following GitHub repositories:
- psf/requests - HTTP library
- waylan/beautifulsoup - HTML parsing
- tiangolo/fastapi - Web framework
'''
        }
        
        print("1. Generating project with GitHub repositories...")
        
        with tempfile.TemporaryDirectory() as temp_dir:
            generator = ProjectGenerator()
            
            project = await generator.generate_project(
                project_name="NewsScraperAPI",
                output_dir=temp_dir,
                files=test_files,
                project_description="News scraping API with FastAPI, requests, and BeautifulSoup integration",
                language="python",
                repositories=test_repositories
            )
            
            print(f"‚úÖ Project generated: {project.name}")
            print(f"   Path: {project.path}")
            print(f"   Files: {len(project.files)}")
            
            # Check if analysis_report.json was created
            report_path = Path(project.path) / "analysis_report.json"
            
            if not report_path.exists():
                print("‚ùå analysis_report.json not found, creating it...")
                
                # Generate the analysis report
                reporter = AIIntegratedReporter()
                
                project_data = {
                    'name': project.name,
                    'path': project.path,
                    'files': project.files,
                    'size': project.size,
                    'language': 'python',
                    'description': 'News scraping API with FastAPI, requests, and BeautifulSoup integration'
                }
                
                # Create analysis report data
                analysis_data = {
                    'project_name': project.name,
                    'description': project_data['description'],
                    'language': project_data['language'],
                    'components_found': len(test_repositories),
                    'files_generated': project.files,
                    'search_results': {
                        'packages': len(test_repositories),
                        'curated_collections': 0,
                        'discovered_repositories': len(test_repositories)
                    },
                    'timestamp': datetime.now().isoformat(),
                    'output_directory': project.path,
                    'repositories': test_repositories  # Include the repositories data
                }
                
                # Save analysis report
                with open(report_path, 'w', encoding='utf-8') as f:
                    json.dump(analysis_data, f, indent=2, ensure_ascii=False)
                
                print(f"‚úÖ Created analysis_report.json at {report_path}")
            
            print("\n2. Reading and validating analysis_report.json...")
            
            # Read the analysis report
            with open(report_path, 'r', encoding='utf-8') as f:
                report_data = json.load(f)
            
            print(f"‚úÖ Report loaded successfully")
            print(f"   Project: {report_data.get('project_name', 'Unknown')}")
            print(f"   Components: {report_data.get('components_found', 0)}")
            
            # Test 1: Check if repositories section exists
            repositories = report_data.get('repositories', [])
            if not repositories:
                print("‚ùå No repositories found in analysis_report.json")
                return False
            
            print(f"‚úÖ Found {len(repositories)} repositories in report")
            
            # Test 2: Validate GitHub repository name formats
            print("\n3. Validating GitHub repository name formats...")
            
            valid_formats = 0
            invalid_formats = 0
            
            expected_formats = ['psf/requests', 'waylan/beautifulsoup', 'tiangolo/fastapi']
            
            for repo in repositories:
                repo_name = repo.get('name', '')
                repo_url = repo.get('url', '')
                full_name = repo.get('full_name', '')
                
                print(f"\n   Repository: {repo_name}")
                print(f"   URL: {repo_url}")
                print(f"   Full name: {full_name}")
                
                # Check if full_name is in username/repo-name format
                if full_name and '/' in full_name and len(full_name.split('/')) == 2:
                    username, repo_part = full_name.split('/')
                    if username and repo_part:
                        print(f"   ‚úÖ Valid format: {full_name}")
                        valid_formats += 1
                        
                        # Check if it matches expected format
                        if full_name in expected_formats:
                            print(f"   ‚úÖ Matches expected format")
                        else:
                            print(f"   ‚ö†Ô∏è Unexpected format (but valid): {full_name}")
                    else:
                        print(f"   ‚ùå Invalid format (empty parts): {full_name}")
                        invalid_formats += 1
                else:
                    print(f"   ‚ùå Invalid format (not username/repo): {full_name}")
                    invalid_formats += 1
                
                # Additional checks
                if repo_url and 'github.com' in repo_url:
                    print(f"   ‚úÖ Valid GitHub URL")
                else:
                    print(f"   ‚ö†Ô∏è Not a GitHub URL: {repo_url}")
            
            print(f"\n4. Format Validation Results:")
            print(f"   Valid formats: {valid_formats}")
            print(f"   Invalid formats: {invalid_formats}")
            print(f"   Total repositories: {len(repositories)}")
            
            # Test 3: Check for required fields
            print(f"\n5. Checking required fields...")
            
            required_fields = ['name', 'url', 'full_name', 'purpose', 'license']
            missing_fields = []
            
            for repo in repositories:
                for field in required_fields:
                    if field not in repo or not repo[field]:
                        missing_fields.append(f"{repo.get('name', 'Unknown')}.{field}")
            
            if missing_fields:
                print(f"   ‚ö†Ô∏è Missing fields: {missing_fields}")
            else:
                print(f"   ‚úÖ All required fields present")
            
            # Test 4: Verify report structure
            print(f"\n6. Verifying report structure...")
            
            required_report_fields = [
                'project_name', 'description', 'language', 'components_found',
                'files_generated', 'timestamp', 'repositories'
            ]
            
            missing_report_fields = []
            for field in required_report_fields:
                if field not in report_data:
                    missing_report_fields.append(field)
            
            if missing_report_fields:
                print(f"   ‚ö†Ô∏è Missing report fields: {missing_report_fields}")
            else:
                print(f"   ‚úÖ All required report fields present")
            
            # Final assessment
            print(f"\n" + "=" * 70)
            print("GITHUB REPOSITORY FORMAT TEST RESULTS")
            print("=" * 70)
            
            success_criteria = [
                (valid_formats > 0, f"Valid repository formats found: {valid_formats}"),
                (invalid_formats == 0, f"No invalid formats: {invalid_formats == 0}"),
                (len(repositories) >= 3, f"Sufficient repositories: {len(repositories)} >= 3"),
                (len(missing_fields) == 0, f"All required fields present: {len(missing_fields) == 0}"),
                (len(missing_report_fields) == 0, f"Report structure complete: {len(missing_report_fields) == 0}")
            ]
            
            passed_criteria = 0
            total_criteria = len(success_criteria)
            
            for passed, description in success_criteria:
                status = "‚úÖ PASS" if passed else "‚ùå FAIL"
                print(f"{status}: {description}")
                if passed:
                    passed_criteria += 1
            
            print(f"\nOverall: {passed_criteria}/{total_criteria} criteria passed")
            
            if passed_criteria == total_criteria:
                print("\nüéâ SUCCESS: GitHub repository format test PASSED!")
                print("‚úÖ analysis_report.json correctly includes repository names in 'username/repo-name' format")
                return True
            else:
                print(f"\n‚ùå FAILURE: {total_criteria - passed_criteria} criteria failed")
                print("üîß The analysis_report.json needs improvements for GitHub repository format")
                return False
            
    except Exception as e:
        print(f"‚ùå Test failed with exception: {e}")
        logger.exception("GitHub repository format test failed")
        return False

async def main():
    """Run the GitHub repository format test."""
    print("üß™ AutoBot Assembly System - GitHub Repository Format Test")
    print("Testing that analysis_report.json includes GitHub repo names in 'username/repo-name' format")
    print("=" * 70)
    
    success = await test_github_repo_format_in_report()
    
    if success:
        print("\nüéâ GITHUB REPOSITORY FORMAT TEST PASSED!")
        print("üìã The analysis_report.json correctly includes:")
        print("   ‚úÖ Repository names in 'username/repo-name' format")
        print("   ‚úÖ Complete repository metadata")
        print("   ‚úÖ Proper JSON structure")
        print("   ‚úÖ All required fields")
    else:
        print("\n‚ùå GitHub repository format test failed")
        print("üîß Check the analysis above for specific issues")
    
    return success

if __name__ == "__main__":
    asyncio.run(main())