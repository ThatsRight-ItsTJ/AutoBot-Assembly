# =============================================================================
# AutoBot-Assembly Configuration Template
# =============================================================================
# Copy this file to .env and configure your API keys and settings
# =============================================================================

# =============================================================================
# AI PROVIDER API KEYS
# =============================================================================
# Configure API keys for different AI providers. The system supports multiple
# providers and will automatically use available keys with fallback logic.
# Set at least one API key for AI functionality to work properly.

# OpenAI API Configuration
# Get your API key from: https://platform.openai.com/api-keys
OPENAI_API_KEY=your_openai_api_key_here
# Optional: OpenAI organization ID (if needed)
OPENAI_ORG_ID=your_openai_org_id_here

# Anthropic Claude API Configuration
# Get your API key from: https://console.anthropic.com/
ANTHROPIC_API_KEY=your_anthropic_api_key_here

# Google AI API Configuration
# Get your API key from: https://makersuite.google.com/app/apikey
GOOGLE_API_KEY=your_google_api_key_here

# Z.ai/Bigmodel API Configuration
# Get your API key from: https://open.bigmodel.cn/
ZAI_API_KEY=your_zai_api_key_here

# Pollinations AI Configuration
# Note: Pollinations offers a free tier, but you can also get an API key
# from: https://pollinations.ai/
POLLINATIONS_API_KEY=your_pollinations_api_key_here

# =============================================================================
# FUNCTION-SPECIFIC API KEYS (Optional)
# =============================================================================
# Configure different API keys for specific functions. This allows you to
# use different providers for different components (e.g., OpenAI for analysis,
# Claude for reporting). If not set, the system will use global API keys.

# Project Analyzer Function
PROJECT_ANALYZER_OPENAI_API_KEY=your_openai_key_for_analysis
PROJECT_ANALYZER_ANTHROPIC_API_KEY=your_anthropic_key_for_analysis
PROJECT_ANALYZER_GOOGLE_API_KEY=your_google_key_for_analysis
PROJECT_ANALYZER_ZAI_API_KEY=your_zai_key_for_analysis
PROJECT_ANALYZER_POLLINATIONS_API_KEY=your_pollinations_key_for_analysis

# AI Reporter Function
AI_REPORTER_OPENAI_API_KEY=your_openai_key_for_reporting
AI_REPORTER_ANTHROPIC_API_KEY=your_anthropic_key_for_reporting
AI_REPORTER_GOOGLE_API_KEY=your_google_key_for_reporting
AI_REPORTER_ZAI_API_KEY=your_zai_key_for_reporting
AI_REPORTER_POLLINATIONS_API_KEY=your_pollinations_key_for_reporting

# Search Orchestrator Function
SEARCH_ORCHESTRATOR_OPENAI_API_KEY=your_openai_key_for_search
SEARCH_ORCHESTRATOR_ANTHROPIC_API_KEY=your_anthropic_key_for_search
SEARCH_ORCHESTRATOR_GOOGLE_API_KEY=your_google_key_for_search
SEARCH_ORCHESTRATOR_ZAI_API_KEY=your_zai_key_for_search
SEARCH_ORCHESTRATOR_POLLINATIONS_API_KEY=your_pollinations_key_for_search

# =============================================================================
# GLOBAL API SETTINGS
# =============================================================================
# Configure global settings for AI providers and API behavior

# Default AI provider (options: pollinations, openai, anthropic, google, zai)
# The system will try to use this provider first, then fall back to others
DEFAULT_AI_PROVIDER=pollinations

# Pollinations-specific settings
POLLINATIONS_ENDPOINT=https://text.pollinations.ai/openai
POLLINATIONS_MODEL=gpt-4

# =============================================================================
# GITHUB API CONFIGURATION
# =============================================================================
# Required for GitHub API access. Get your token from:
# https://github.com/settings/tokens
# Make sure to give it appropriate permissions for public repositories
GITHUB_TOKEN=your_github_personal_access_token_here

# =============================================================================
# EXTERNAL SERVICE API KEYS
# =============================================================================
# Optional API keys for additional services

# Libraries.io API (for package dependency analysis)
# Get your API key from: https://libraries.io/api
LIBRARIES_IO_API_KEY=your_libraries_io_api_key_here

# =============================================================================
# AUTOBOT ASSEMBLY ENHANCEMENTS
# =============================================================================

# SourceGraph Integration
# SourceGraph provides semantic code search across millions of repositories
# for real-world usage patterns and proven integration approaches
# Get your API token from: https://sourcegraph.com/user/settings/tokens
SOURCEGRAPH_API_TOKEN=your_token_here
# SourceGraph API endpoint for GraphQL queries
SOURCEGRAPH_ENDPOINT=https://sourcegraph.com/.api/graphql

# Context7 MCP Server Integration
# Context7 provides up-to-date, version-specific library documentation
# directly in AI context, eliminating hallucinated APIs and outdated examples
# Enable/disable Context7 MCP integration
CONTEXT7_ENABLED=true
# Maximum tokens for Context7 responses (higher values = more detailed docs)
CONTEXT7_MAX_TOKENS=10000

# Tree-sitter Configuration
# Tree-sitter provides universal, high-performance parsing for 40+ programming
# languages, enabling deep structural analysis of discovered repositories
# Cache directory for parsed ASTs (improves performance for repeated analysis)
TREESITTER_CACHE_DIR=./cache/tree-sitter
# Supported languages for Tree-sitter analysis (comma-separated)
# Available: python, javascript, typescript, java, go, rust, cpp, c_sharp, php, ruby, swift
TREESITTER_LANGUAGES=python,javascript,typescript,java,go,rust,cpp,c_sharp

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================
# Redis configuration for caching and session management
# Required for optimal performance, especially with multiple API calls

REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_DB=0
REDIS_PASSWORD=your_redis_password_here

# =============================================================================
# PERFORMANCE & QUALITY SETTINGS
# =============================================================================
# Configure quality thresholds and performance parameters

# Quality thresholds (0.0 to 1.0)
MIN_FILE_SCORE=0.7
MIN_COMPATIBILITY_SCORE=0.8

# Repository limits
MAX_REPOSITORIES=50
MAX_REPOS_PER_SEARCH=10

# Rate limiting and timeouts
GITHUB_RATE_LIMIT=5000
API_REQUEST_DELAY=1.0
GLOBAL_TIMEOUT=300

# File analysis timeouts (in seconds)
MEGALINTER_TIMEOUT=300
SEMGREP_TIMEOUT=180
ASTGREP_TIMEOUT=120

# =============================================================================
# ADVANCED SETTINGS
# =============================================================================
# Optional advanced configuration options

# Enable/disable features
ENABLE_CACHING=true
ENABLE_ANALYTICS=false
ENABLE_DEBUG_MODE=false

# Caching settings
CACHE_DURATION_HOURS=24
MAX_CACHE_SIZE=1000

# Concurrency settings
MAX_CONCURRENT_CLONES=3
MAX_CONCURRENT_API_CALLS=5

# History settings
SAVE_HISTORY=true
MAX_HISTORY_ITEMS=50

# =============================================================================
# UI & DISPLAY SETTINGS
# =============================================================================
# Configure user interface preferences

# Rich library usage
USE_RICH=true
COLOR_THEME=auto  # options: auto, dark, light
SHOW_PROGRESS=true

# Verbosity settings
VERBOSE=false
AUTO_CONFIRM=false

# =============================================================================
# BEHAVIOR SETTINGS
# =============================================================================
# Configure system behavior and feature flags

# Feature toggles
SKIP_TESTS=false
SKIP_DOCS=false
SKIP_ANALYSIS=false
SKIP_REPORTING=false

# Auto-confirm settings
AUTO_CONFIRM=false
PROMPT_BEFORE_OVERWRITE=true

# =============================================================================
# SECURITY SETTINGS
# =============================================================================
# Configure security and access control

# API key rotation (if supported)
ENABLE_KEY_ROTATION=false
KEY_ROTATION_INTERVAL_DAYS=30

# Request security
ENABLE_REQUEST_SIGNING=false
API_SIGNATURE_KEY=your_api_signature_key_here

# =============================================================================
# TREE-SITTER CONFIGURATION
# =============================================================================
# Configure Tree-sitter for multi-language code analysis
# Tree-sitter cache directory for parsed ASTs
TREESITTER_CACHE_DIR=./cache/tree-sitter

# Supported languages for Tree-sitter analysis (comma-separated)
# Supported languages: python, javascript, typescript, java, go, rust, cpp, c_sharp, php, ruby, swift
TREESITTER_LANGUAGES=python,javascript,typescript,java,go,rust,cpp,c_sharp

# =============================================================================
# END OF CONFIGURATION
# =============================================================================
# Note: This file is a template. Copy it to .env and fill in your actual values.
# Never commit your .env file to version control.

# =============================================================================
# PERFORMANCE OPTIMIZER CONFIGURATION
# =============================================================================
# Configure the performance optimization system for all integrations
# These settings control caching, parallel processing, and optimization levels

# Optimization level: basic, moderate, aggressive
OPTIMIZATION_LEVEL=moderate

# Cache strategy: memory, disk, hybrid
CACHE_STRATEGY=hybrid

# Maximum number of worker threads/processes
OPTIMIZATION_MAX_WORKERS=4

# Enable parallel processing (true/false)
OPTIMIZATION_PARALLEL=true

# Maximum cache size (number of items)
CACHE_SIZE=1000

# Disk cache path for persistent caching
DISK_CACHE_PATH=./cache/performance_cache

# Enable request throttling (true/false)
REQUEST_THROTTLING=true

# Maximum requests per second
MAX_REQUESTS_PER_SECOND=100

# Enable batch processing (true/false)
BATCH_PROCESSING=true

# Batch size for processing items
BATCH_SIZE=10

# Maximum wait time for batch completion (seconds)
MAX_BATCH_WAIT_TIME=1.0
# =============================================================================